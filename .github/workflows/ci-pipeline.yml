name: CI Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'my-k8s-project/lb-exporter/**'
      - 'kubernetes-manifests/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'my-k8s-project/lb-exporter/**'
      - 'kubernetes-manifests/**'

env:
  REGISTRY: registry.cloud.kt.com
  IMAGE_NAME: nqtv7l5h/lb-exporter
  PYTHON_VERSION: 3.9

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('my-k8s-project/lb-exporter/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd my-k8s-project/lb-exporter
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black safety bandit

      - name: Run code formatting
        run: |
          cd my-k8s-project/lb-exporter
          black .
          echo "Code formatting completed"

      - name: Run linting
        run: |
          cd my-k8s-project/lb-exporter
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run security checks
        run: |
          cd my-k8s-project/lb-exporter
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() && (hashFiles('my-k8s-project/lb-exporter/bandit-report.json') != '' || hashFiles('my-k8s-project/lb-exporter/safety-report.json') != '')
        with:
          name: test-results
          path: |
            my-k8s-project/lb-exporter/bandit-report.json
            my-k8s-project/lb-exporter/safety-report.json

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: my-k8s-project/lb-exporter
          file: my-k8s-project/lb-exporter/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-dev:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update development manifests
        run: |
          # Check if k8s-manifests/overlays/dev/kustomization.yaml exists
          if [ -f "k8s-manifests/overlays/dev/kustomization.yaml" ]; then
            sed -i "s|newTag: .*|newTag: develop-${{ github.sha }}|g" \
              k8s-manifests/overlays/dev/kustomization.yaml
            
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git add k8s-manifests/overlays/dev/kustomization.yaml
            git commit -m "Update dev image to ${{ github.sha }}" || exit 0
            git push
          else
            echo "Development overlay not found, skipping update"
          fi

  deploy-staging:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update staging manifests
        run: |
          # Check if k8s-manifests/overlays/staging/kustomization.yaml exists
          if [ -f "k8s-manifests/overlays/staging/kustomization.yaml" ]; then
            sed -i "s|newTag: .*|newTag: main-${{ github.sha }}|g" \
              k8s-manifests/overlays/staging/kustomization.yaml
            
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git add k8s-manifests/overlays/staging/kustomization.yaml
            git commit -m "Update staging image to ${{ github.sha }}" || exit 0
            git push
          else
            echo "Staging overlay not found, skipping update"
          fi

  notify:
    needs: [deploy-dev, deploy-staging]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          echo "Deployment completed for ${{ github.ref }}"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"