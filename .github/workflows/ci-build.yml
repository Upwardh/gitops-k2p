name: CI - Build and Push Docker Image

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/lb-exporter/**'
      - '.github/workflows/ci-build.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/lb-exporter/**'

env:
  REGISTRY: registry.cloud.kt.com
  IMAGE_NAME: nqtv7l5h/lb-exporter

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to KT Cloud Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value={{branch}}-latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./src/lb-exporter
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-gitops:
    name: Update GitOps Repository
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout GitOps repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITOPS_TOKEN }}
          fetch-depth: 0

      - name: Update image tags in manifests
        run: |
          
          # Extract the main image tag (branch-latest format)
          IMAGE_TAG=$(echo "${{ needs.build.outputs.image-tag }}" | grep -o '[^,]*-latest' | head -1)
          
          echo "üöÄ Updating image tag to: $IMAGE_TAG"
          
          # Update dev environment (from develop branch)
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "üìù Updating dev environment"
            
            # Update dev GitOps manifest
            sed -i "s|image: registry.cloud.kt.com/nqtv7l5h/lb-exporter:.*|image: registry.cloud.kt.com/nqtv7l5h/lb-exporter:$IMAGE_TAG|g" gitops/dev/lb-exporter.yaml
            
            echo "‚úÖ Dev environment updated with image: $IMAGE_TAG"
          fi
          
          # Update staging/prod environments (from main branch)
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "üìù Updating staging and prod environments"
            
            # Update staging GitOps manifest
            sed -i "s|image: registry.cloud.kt.com/nqtv7l5h/lb-exporter:.*|image: registry.cloud.kt.com/nqtv7l5h/lb-exporter:$IMAGE_TAG|g" gitops/staging/lb-exporter.yaml
            
            # Update prod GitOps manifest  
            sed -i "s|image: registry.cloud.kt.com/nqtv7l5h/lb-exporter:.*|image: registry.cloud.kt.com/nqtv7l5h/lb-exporter:$IMAGE_TAG|g" gitops/prod/lb-exporter.yaml
            
            echo "‚úÖ Staging and prod environments updated with image: $IMAGE_TAG"
          fi

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add .
            git commit -m "ü§ñ Update lb-exporter image 
            
            Updated by GitHub Actions from commit ${{ github.sha }}
            
            Co-authored-by: GitHub Actions <action@github.com>"
            git push
            echo "‚úÖ GitOps repository updated"
          fi

  notify:
    name: Build Status Notification
    runs-on: ubuntu-latest
    needs: [build, update-gitops]
    if: always()
    steps:
      - name: Build Status Report
        run: |
          echo "üî® **CI Build Summary**"
          echo ""
          echo "**Repository:** ${{ github.repository }}"
          echo "**Branch:** ${{ github.ref_name }}"
          echo "**Commit:** ${{ github.sha }}"
          echo ""
          
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "‚úÖ **Build Status:** SUCCESS"
            echo "**Image Tags:** ${{ needs.build.outputs.image-tag }}"
            echo "**Registry:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          else
            echo "‚ùå **Build Status:** FAILED"
          fi
          
          if [[ "${{ needs.update-gitops.result }}" == "success" ]]; then
            echo "‚úÖ **GitOps Update:** SUCCESS"
          elif [[ "${{ needs.update-gitops.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è **GitOps Update:** SKIPPED (PR only)"
          else
            echo "‚ùå **GitOps Update:** FAILED"
          fi
          
          echo ""
          echo "**Next Step:** ArgoCD will automatically deploy the updated image"