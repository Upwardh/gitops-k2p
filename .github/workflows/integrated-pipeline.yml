name: Integrated KT Cloud Monitoring Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/lb-exporter/**'
      - 'environments/**' 
      - '.github/workflows/integrated-pipeline.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/lb-exporter/**'
      - 'environments/**'

env:
  REGISTRY: registry.cloud.kt.com
  IMAGE_NAME: nqtv7l5h/lb-exporter
  KUBECTL_VERSION: v1.30.4
  HELM_VERSION: v3.12.0

jobs:
  build-image:
    name: Build LB Exporter Image
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'src/lb-exporter/') || contains(github.event.head_commit.added, 'src/lb-exporter/')
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to KT Cloud Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./src/lb-exporter
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-image]
    if: github.ref == 'refs/heads/develop' && (always() && !failure())
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy LB Exporters
        run: |
          echo "=== Deploying LB Exporters to monitoring-dev ==="
          
          # Ensure namespace exists
          kubectl create namespace monitoring-dev --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply lb-exporter manifests
          kubectl apply -f environments/lb-exporter/dev/
          
          # Wait for deployments
          kubectl rollout status deployment/dev-lb-exporter -n monitoring-dev --timeout=300s
          kubectl rollout status deployment/dev-lb-exporter-account2 -n monitoring-dev --timeout=300s

      - name: Add Helm repositories
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Deploy Monitoring Stack
        run: |
          echo "=== Deploying Monitoring Stack to monitoring-dev ==="
          
          # Deploy Prometheus + Grafana
          helm upgrade --install prometheus-dev prometheus-community/kube-prometheus-stack \
            -f environments/monitoring/dev/prometheus-values-dev.yaml \
            -n monitoring-dev \
            --wait --timeout=10m
          
          echo "âœ… Dev environment deployed successfully"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-image]
    if: github.ref == 'refs/heads/main' && (always() && !failure())
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy LB Exporters
        run: |
          echo "=== Deploying LB Exporters to monitoring-staging ==="
          
          # Ensure namespace exists
          kubectl create namespace monitoring-staging --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply lb-exporter manifests
          kubectl apply -f environments/lb-exporter/staging/
          
          # Wait for deployments
          kubectl rollout status deployment/staging-lb-exporter -n monitoring-staging --timeout=300s
          kubectl rollout status deployment/staging-lb-exporter-account2 -n monitoring-staging --timeout=300s

      - name: Add Helm repositories
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Deploy Monitoring Stack
        run: |
          echo "=== Deploying Monitoring Stack to monitoring-staging ==="
          
          # Deploy Prometheus + Grafana
          helm upgrade --install prometheus-staging prometheus-community/kube-prometheus-stack \
            -f environments/monitoring/staging/prometheus-values-staging.yaml \
            -n monitoring-staging \
            --wait --timeout=10m
          
          echo "âœ… Staging environment deployed successfully"

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-image, deploy-staging]
    if: github.ref == 'refs/heads/main' && success()
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy LB Exporters
        run: |
          echo "=== Deploying LB Exporters to monitoring-prod ==="
          
          # Ensure namespace exists
          kubectl create namespace monitoring-prod --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply lb-exporter manifests
          kubectl apply -f environments/lb-exporter/prod/
          
          # Wait for deployments
          kubectl rollout status deployment/prod-lb-exporter -n monitoring-prod --timeout=300s
          kubectl rollout status deployment/prod-lb-exporter-account2 -n monitoring-prod --timeout=300s

      - name: Add Helm repositories
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Deploy Monitoring Stack
        run: |
          echo "=== Deploying Monitoring Stack to monitoring-prod ==="
          
          # Deploy Prometheus + Grafana (HA configuration)
          helm upgrade --install prometheus-prod prometheus-community/kube-prometheus-stack \
            -f environments/monitoring/prod/prometheus-values-prod.yaml \
            -n monitoring-prod \
            --wait --timeout=15m
          
          echo "âœ… Production environment deployed successfully"

  status-report:
    name: Deployment Status Report
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-prod.result == 'success')
    steps:
      - name: Report Deployment Status
        run: |
          echo "ðŸš€ **KT Cloud Monitoring Pipeline Summary**"
          echo ""
          
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "ðŸŸ¢ **Development Environment**"
            echo "- URL: dev.grafana.devtron.click"
            echo "- Login: admin / DevAdmin123"
            echo "- LB Exporter: DX-M1 + DX-G-YS monitoring"
          fi
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ðŸŸ¡ **Staging Environment**"
            echo "- URL: staging.grafana.devtron.click"
            echo "- Login: admin / StagingAdmin123"
            echo ""
            echo "ðŸ”´ **Production Environment**"
            echo "- URL: prod.grafana.devtron.click" 
            echo "- Login: admin / ProdAdmin123"
            echo "- High Availability: 2 replicas"
          fi
          
          echo ""
          echo "ðŸ“Š **Available Dashboards:**"
          echo "- KT Cloud Account - ALL"
          echo "- KT Cloud LB Dashboard - ktcloud_test (DX-M1)"
          echo "- KT Cloud LB Dashboard - semascrd_d019_gov (DX-G-YS)"