name: Monitoring Stack CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      # 모니터링 스택 관련 파일 변경시에만 트리거
      - 'environments/**'
      - 'k8s-manifests/base/grafana-dashboards-configmap.yaml'
      - 'k8s-manifests/base/grafana-ingress.yaml'
      - 'k8s-manifests/base/lb-exporter-servicemonitor.yaml'
      - 'k8s-manifests/overlays/*/grafana-ingress.yaml'
      - '.github/workflows/monitoring-stack-cd.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'environments/**'
      - 'k8s-manifests/base/grafana-dashboards-configmap.yaml'
      - 'k8s-manifests/base/grafana-ingress.yaml'
      - 'k8s-manifests/base/lb-exporter-servicemonitor.yaml'
      - 'k8s-manifests/overlays/*/grafana-ingress.yaml'
      - '.github/workflows/monitoring-stack-cd.yml'

env:
  KUBECTL_VERSION: v1.28.0
  HELM_VERSION: v3.12.0

jobs:
  validate:
    name: Validate Monitoring Stack Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Add Prometheus Helm repository
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Validate Helm values files
        run: |
          echo "=== Validating Prometheus values files ==="
          for env in dev staging prod; do
            echo "Validating $env environment..."
            helm template prometheus-$env prometheus-community/kube-prometheus-stack \
              -f environments/$env/prometheus-values-$env.yaml \
              --namespace monitoring-$env > /dev/null
            echo "✅ $env environment validated"
          done

      - name: Validate Kubernetes manifests
        run: |
          echo "=== Validating Kubernetes manifests ==="
          for env in dev staging prod; do
            echo "Validating $env environment manifests..."
            kubectl --dry-run=client apply -f environments/$env/lb-exporter-account2-deployment.yaml
            kubectl --dry-run=client apply -f environments/$env/lb-exporter-account2-service.yaml
            kubectl --dry-run=client apply -f environments/$env/grafana-ingress.yaml
            echo "✅ $env manifests validated"
          done

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: validate
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > ~/.kube/config
          kubectl config use-context dev-cluster

      - name: Add Prometheus Helm repository
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Deploy to Development
        run: |
          echo "=== Deploying to Development Environment ==="
          
          # Create namespace if not exists
          kubectl create namespace monitoring-dev --dry-run=client -o yaml | kubectl apply -f -
          kubectl label namespace monitoring-dev name=monitoring-dev --overwrite

          # Deploy lb-exporter account2
          kubectl apply -f environments/dev/lb-exporter-account2-secret.yaml
          kubectl apply -f environments/dev/lb-exporter-account2-deployment.yaml
          kubectl apply -f environments/dev/lb-exporter-account2-service.yaml

          # Upgrade Prometheus + Grafana stack
          helm upgrade --install prometheus-dev prometheus-community/kube-prometheus-stack \
            -f environments/dev/prometheus-values-dev.yaml \
            -n monitoring-dev \
            --wait --timeout=10m

          # Apply ingress
          kubectl apply -f environments/dev/grafana-ingress.yaml

          echo "✅ Development deployment completed"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: validate
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > ~/.kube/config
          kubectl config use-context staging-cluster

      - name: Add Prometheus Helm repository
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Deploy to Staging
        run: |
          echo "=== Deploying to Staging Environment ==="
          
          # Create namespace if not exists
          kubectl create namespace monitoring-staging --dry-run=client -o yaml | kubectl apply -f -
          kubectl label namespace monitoring-staging name=monitoring-staging --overwrite

          # Deploy lb-exporter account2
          kubectl apply -f environments/staging/lb-exporter-account2-secret.yaml
          kubectl apply -f environments/staging/lb-exporter-account2-deployment.yaml
          kubectl apply -f environments/staging/lb-exporter-account2-service.yaml

          # Upgrade Prometheus + Grafana stack
          helm upgrade --install prometheus-staging prometheus-community/kube-prometheus-stack \
            -f environments/staging/prometheus-values-staging.yaml \
            -n monitoring-staging \
            --wait --timeout=10m

          # Apply ingress
          kubectl apply -f environments/staging/grafana-ingress.yaml

          echo "✅ Staging deployment completed"

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [validate, deploy-staging]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > ~/.kube/config
          kubectl config use-context prod-cluster

      - name: Add Prometheus Helm repository
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Deploy to Production
        run: |
          echo "=== Deploying to Production Environment ==="
          
          # Create namespace if not exists
          kubectl create namespace monitoring-prod --dry-run=client -o yaml | kubectl apply -f -
          kubectl label namespace monitoring-prod name=monitoring-prod --overwrite

          # Deploy lb-exporter account2
          kubectl apply -f environments/prod/lb-exporter-account2-secret.yaml
          kubectl apply -f environments/prod/lb-exporter-account2-deployment.yaml
          kubectl apply -f environments/prod/lb-exporter-account2-service.yaml

          # Upgrade Prometheus + Grafana stack
          helm upgrade --install prometheus-prod prometheus-community/kube-prometheus-stack \
            -f environments/prod/prometheus-values-prod.yaml \
            -n monitoring-prod \
            --wait --timeout=15m

          # Apply ingress
          kubectl apply -f environments/prod/grafana-ingress.yaml

          echo "✅ Production deployment completed"

  post-deploy:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-prod.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Health Check Summary
        run: |
          echo "=== Monitoring Stack Deployment Summary ==="
          echo "🔗 **Access URLs:**"
          
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "🟢 **Development Environment:**"
            echo "  - Grafana: http://dev.grafana.devtron.click:30080"
            echo "  - Credentials: admin / DevAdmin123"
          fi
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "🟡 **Staging Environment:**"
            echo "  - Grafana: http://staging.grafana.devtron.click:30080"
            echo "  - Credentials: admin / StagingAdmin123"
            echo ""
            echo "🔴 **Production Environment:**"
            echo "  - Grafana: http://prod.grafana.devtron.click:30080"
            echo "  - Credentials: admin / ProdAdmin123"
          fi
          
          echo ""
          echo "📊 **Available Dashboards:**"
          echo "  - KT Cloud Account - ALL"
          echo "  - KT Cloud LB Dashboard - ktcloud_test (DX-M1)"
          echo "  - KT Cloud LB Dashboard - semascrd_d019_gov (DX-G-YS)"
          echo ""
          echo "✅ Deployment completed successfully!"